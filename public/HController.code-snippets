{
    " Home Controller": {
      "prefix": "homecontroller",
      "body": [
        "namespace App\\Http\\Controllers;",
        "",
        "use Illuminate\\Http\\Request;",
        "use App\\Models\\User;",
        "use App\\Models\\Wallet;",
        "use Illuminate\\Support\\Facades\\Auth;",
        "",
        "class HomeController extends Controller",
        "{",
        "    public function index()",
        "    {",
        "        \\$user = Auth::user(); // Get the currently logged-in user",
        "",
        "        // Admin Section",
        "        if (\\$user->role == 'admin') {",
        "            \\$users = User::all(); // Get all users for admin",
        "            \\$mutasi = Wallet::where('status', 'done')->orderBy('created_at', 'desc')->get(); // Get mutasi for admin",
        "",
        "            return view('home', compact('users', 'mutasi')); // Pass \\$users and \\$mutasi to the view",
        "        }",
        "",
        "        // Bank Section",
        "        if (\\$user->role == 'bank') {",
        "            \\$wallet = Wallet::where('status', 'done')->get();",
        "            \\$credit = 0;",
        "            \\$debit = 0;",
        "            foreach (\\$wallet as \\$w) {",
        "                \\$credit += \\$w->credit;",
        "                \\$debit  += \\$w->debit;",
        "            }",
        "            \\$saldo = \\$credit - \\$debit;",
        "            \\$users = User::where('role', 'siswa')->get(); // Get all 'siswa' users",
        "            \\$request_payment = Wallet::where('status', 'process')->orderBy('created_at', 'DESC')->get();",
        "            \\$mutasi = Wallet::whereIn('status', ['done', 'rejected'])->orderBy('created_at', 'DESC')->get();",
        "            \\$allMutasi = Wallet::where('status', 'done')->count();",
        "",
        "            return view('home', compact('saldo', 'users', 'request_payment', 'mutasi', 'allMutasi'));",
        "        }",
        "",
        "        // Siswa Section",
        "        if (\\$user->role == 'siswa') {",
        "            \\$wallets = Wallet::where('user_id', \\$user->id)->where('status', 'done')->get();",
        "            \\$credit = 0;",
        "            \\$debit = 0;",
        "            foreach (\\$wallets as \\$wallet) {",
        "                \\$credit += \\$wallet->credit;",
        "                \\$debit += \\$wallet->debit;",
        " âŸ´           }",
        "            \\$saldo = \\$credit - \\$debit;",
        "            \\$mutasi = Wallet::where('user_id', \\$user->id)->orderBy('created_at', 'desc')->get();",
        "            \\$users = User::where('role', 'siswa')->where('id', '!=', \\$user->id)->get(); // Exclude the current user from the list of 'siswa'",
        "",
        "            return view('home', compact('saldo', 'mutasi', 'users'));",
        "        }",
        "",
        "        // Default Response (in case none of the roles match)",
        "        return redirect()->route('home');",
        "    }",
        "}"
      ],
      "description": "Laravel HomeController with role-based logic for admin, bank, and siswa"
    },
    " User Controller": {
      "prefix": "usercontroller",
      "body": [
        "namespace App\\Http\\Controllers;",
        "",
        "use App\\Models\\User;",
        "use Illuminate\\Http\\Request;",
        "use Illuminate\\Support\\Facades\\Hash;",
        "",
        "class UserController extends Controller",
        "{",
        "    public function create()",
        "    {",
        "        return view('admin.add-user');",
        "    }",
        "",
        "    public function store(Request \\$request)",
        "    {",
        "        \\$request->validate([",
        "            'name' => 'required|string|max:100',",
        "            'email' => 'required|email|unique:users,email',",
        "            'password' => 'required|confirmed|min:6',",
        "            'role' => 'required|in:siswa,admin,bank',",
        "        ]);",
        "",
        "        \\$user = User::create([",
        "            'name' => \\$request->name,",
        "            'email' => \\$request->email,",
        "            'role' => \\$request->role,",
        "            'password' => Hash::make(\\$request->password),",
        "        ]);",
        "",
        "        if (\\$user) {",
        "            return redirect()->route('home')->with('status', \"Success Add User\");",
        "        }",
        "        return redirect()->back()->with('status', \"Failed Add User\");",
        "    }",
        "",
        "    public function edit(User \\$user)",
        "    {",
        "        return view(\"admin.edit-user\", compact(\"user\"));",
        "    }",
        "",
        "    public function update(Request \\$request, User \\$user)",
        "    {",
        "        \\$request->validate([",
        "            'name' => 'required|string|max:100',",
        "            'email' => 'required|email|unique:users,email,' . \\$user->id,",
        "            'password' => 'nullable|confirmed|min:6',",
        "        ]);",
        "",
        "        \\$data = [",
        "            'name' => \\$request->name,",
        "            'email' => \\$request->email,",
        "        ];",
        "",
        "        // Update password jika diisi",
        "        if (\\$request->filled('password')) {",
        "            \\$data['password'] = Hash::make(\\$request->password);",
        "        }",
        "",
        "        \\$updated = \\$user->update(\\$data);",
        "",
        "        if (\\$updated) {",
        "            return redirect()->route('home')->with(\"status\", \"Success Update User\");",
        "        }",
        "",
        "        return redirect()->back()->with(\"status\", \"Failed Update User\");",
        "    }",
        "",
        "    public function destroy(User \\$user)",
        "    {",
        "        \\$deleted = \\$user->delete();",
        "",
        "        if (\\$deleted) {",
        "            return redirect()->route('home')->with(\"status\", \"Success Delete User\");",
        "        }",
        "",
        "        return redirect()->back()->with(\"status\", \"Failed Delete User\");",
        "    }",
        "}"
      ],
      "description": "Laravel UserController with CRUD operations for user management"
    },
    " Wallet Controller": {
      "prefix": "walletcontroller",
      "body": [
        "<?php",
        "",
        "namespace App\\Http\\Controllers;",
        "",
        "use App\\Models\\User;",
        "use App\\Models\\Wallet;",
        "use Illuminate\\Http\\Request;",
        "use Illuminate\\Support\\Facades\\Auth;",
        "use Illuminate\\Support\\Facades\\DB;",
        "",
        "class WalletController extends Controller",
        "{",
        "    public function topup(Request \\$request)",
        "    {",
        "        \\$request->validate([",
        "            'credit' => 'required|numeric|min:10000'",
        "        ]);",
        "",
        "        Wallet::create([",
        "            'user_id' => Auth::id(),",
        "            'debit' => 0,",
        "            'credit' => \\$request->credit,",
        "            'description' => 'Top-up Saldo',",
        "            'status' => 'process'",
        "        ]);",
        "",
        "        return redirect()->back()->with('status', 'Permintaan Top-Up anda sedang diproses');",
        "    }",
        "",
        "    public function withdraw(Request \\$request)",
        "    {",
        "        \\$request->validate([",
        "            'credit' => 'required|numeric|min:10000'",
        "        ]);",
        "",
        "        \\$user = Auth::user();",
        "        \\$totalSaldo = Wallet::where('user_id', \\$user->id)",
        "            ->where('status', 'done')",
        "            ->sum(DB::raw('credit - debit'));",
        "",
        "        if (\\$totalSaldo < \\$request->credit) {",
        "            return redirect()->back()->with('status', 'Saldo tidak mencukupi');",
        "        }",
        "",
        "        // Menambahkan transaksi withdraw langsung",
        "        Wallet::create([",
        "            'user_id' => \\$user->id,",
        "            'debit' => \\$request->credit,",
        "            'credit' => 0,",
        "            'description' => 'Withdraw Saldo',",
        "            'status' => 'done', // Status langsung 'done', tanpa persetujuan",
        "        ]);",
        "",
        "        return redirect()->back()->with('status', 'Withdraw berhasil');",
        "    }",
        "",
        "    public function transfer(Request \\$request)",
        "    {",
        "        \\$user = Auth::user(); // Mendapatkan user yang sedang login",
        "",
        "        // Validasi amount dan penerima",
        "        \\$validated = \\$request->validate([",
        "            'recepient_id' => 'required|exists:users,id', // Pastikan penerima ada di database",
        "            'amount' => 'required|numeric|min:1', // Pastikan amount lebih dari 0",
        "        ]);",
        "",
        "        // Mendapatkan penerima",
        "        \\$recepient = User::find(\\$request->recepient_id);",
        "",
        "        // Mengecek apakah pengirim memiliki saldo cukup",
        "        \\$wallets = Wallet::where('user_id', \\$user->id)->where('status', 'done')->get();",
        "        \\$credit = 0;",
        "        \\$debit = 0;",
        "",
        "        foreach (\\$wallets as \\$wallet) {",
        "            \\$credit += \\$wallet->credit;",
        "            \\$debit += \\$wallet->debit;",
        "        }",
        "",
        "        \\$saldoPengirim = \\$credit - \\$debit;",
        "",
        "        if (\\$saldoPengirim < \\$request->amount) {",
        "            return redirect()->back()->with('error', 'Saldo Anda tidak cukup untuk melakukan transfer.');",
        "        }",
        "",
        "        // Proses transfer, update saldo pengirim dan penerima",
        "        // Debit dari pengirim",
        "        Wallet::create([",
        "            'user_id' => \\$user->id,",
        "            'credit' => 0,",
        "            'debit' => \\$request->amount,",
        "            'description' => 'Transfer ke ' . \\$recepient->name,",
        "            'status' => 'done',",
        "        ]);",
        "",
        "        // Kredit ke penerima",
        "        Wallet::create([",
        "            'user_id' => \\$recepient->id,",
        "            'credit' => \\$request->amount,",
        "            'debit' => 0,",
        "            'description' => 'Transfer dari ' . \\$user->name,",
        "            'status' => 'done',",
        "        ]);",
        "",
        "        return redirect()->route('home')->with('success', 'Transfer berhasil.');",
        "    }",
        "",
        "    public function acceptRequest(Request \\$request, \\$walletId)",
        "    {",
        "        \\$wallet = Wallet::findOrFail(\\$walletId);",
        "        \\$wallet->update(['status' => 'done']);",
        "",
        "        return redirect()->back()->with('status', 'Permintaan Berhasil disetujui');",
        "    }",
        "",
        "    public function rejectRequest(Request \\$request, \\$walletId)",
        "    {",
        "        \\$wallet = Wallet::findOrFail(\\$walletId);",
        "        \\$wallet->update(['status' => 'rejected']);",
        "",
        "        return redirect()->back()->with('status', 'Permintaan Ditolak');",
        "    }",
        "",
        "    public function topupsiswa(Request \\$request)",
        "    {",
        "        \\$request->validate([",
        "            'recepient_id' => 'required|exists:users,id',",
        "            'amount' => 'required|numeric|min:1'",
        "        ]);",
        "",
        "        \\$recipient = User::findOrFail(\\$request->recepient_id);",
        "        \\$amount = \\$request->amount;",
        "",
        "        Wallet::create([",
        "            'user_id' => \\$recipient->id,",
        "            'description' => 'Top-up from Bank',",
        "            'debit' => 0,",
        "            'credit' => \\$amount,",
        "            'status' => 'done'",
        "        ]);",
        "",
        "        return redirect()->back()->with('success', 'Top-up berhasil dikirim ke ' . \\$recipient->name);",
        "    }",
        "}"
      ],
      "description": "Laravel WalletController with top-up, withdraw, transfer, and request management"
    },
    "CheckRole Middleware": {
          "prefix": "checkrole",
          "body": [
            "<?php",
            "",
            "namespace App\\Http\\Middleware;",
            "",
            "use Closure;",
            "use Illuminate\\Http\\Request;",
            "use Symfony\\Component\\HttpFoundation\\Response;",
            "",
            "class CheckRole",
            "{",
            "    /**",
            "     * Handle an incoming request.",
            "     *",
            "     * @param  \\Illuminate\\Http\\Request  \\$request",
            "     * @param  \\Closure(\\Illuminate\\Http\\Request): (\\Symfony\\Component\\HttpFoundation\\Response)  \\$next",
            "     * @param  string  \\$role",
            "     * @return \\Symfony\\Component\\HttpFoundation\\Response",
            "     */",
            "    public function handle(Request \\$request, Closure \\$next, string \\$role): Response",
            "    {",
            "        if (!\\$request->user() || \\$request->user()->role !== \\$role) {",
            "            abort(403, 'Unauthorized action.');",
            "        }",
            "",
            "        return \\$next(\\$request);",
            "    }",
            "}"
          ],
          "description": "Laravel middleware to check user role"
    },
    "Wallet Model": {
          "prefix": "walletmodel",
          "body": [
            "<?php",
            "",
            "namespace App\\Models;",
            "use App\\Models\\User;",
            "",
            "use Illuminate\\Database\\Eloquent\\Factories\\HasFactory;",
            "use Illuminate\\Database\\Eloquent\\Model;",
            "",
            "class Wallet extends Model",
            "{",
            "    use HasFactory;",
            "",
            "    protected \\$fillable = [",
            "        'user_id',",
            "        'debit',",
            "        'credit',",
            "        'description',",
            "        'status',",
            "    ];",
            "    ",
            "    public function user() {",
            "        return \\$this->belongsTo(User::class);",
            "    }",
            "}"
          ],
          "description": "Model Wallet dengan relasi ke User dan fillable field"
    },
     "Login Controller": {
          "prefix": "logincontroller",
          "body": [
            "<?php",
            "",
            "namespace App\\Http\\Controllers\\Auth;",
            "",
            "use App\\Http\\Controllers\\Controller;",
            "use Illuminate\\Foundation\\Auth\\AuthenticatesUsers;",
            "use Illuminate\\Http\\Request;",
            "use Illuminate\\Support\\Facades\\Auth;",
            "",
            "class LoginController extends Controller",
            "{",
            "    use AuthenticatesUsers;",
            "",
            "    // Arahkan ke halaman login yang sesuai",
            "    public function showLoginForm()",
            "    {",
            "        return view('login');  // Arahkan ke resources/views/login.blade.php",
            "    }",
            "",
            "    protected \\$redirectTo = '/home';",
            "",
            "    public function __construct()",
            "    {",
            "        \\$this->middleware('guest')->except('logout');",
            "    }",
            "",
            "    // Override logout method",
            "    public function logout(Request \\$request)",
            "    {",
            "        Auth::logout();",
            "        \\$request->session()->invalidate();",
            "        \\$request->session()->regenerateToken();",
            "",
            "        return redirect('/');  // Redirect ke halaman login setelah logout",
            "    }",
            "}"
          ],
          "description": "LoginController untuk otentikasi dan logout"
    },
    "Wallets Migration": {
          "prefix": "walletmigration",
          "body": [
            "<?php",
            "",
            "use Illuminate\\Database\\Migrations\\Migration;",
            "use Illuminate\\Database\\Schema\\Blueprint;",
            "use Illuminate\\Support\\Facades\\Schema;",
            "",
            "return new class extends Migration",
            "{",
            "    /**",
            "     * Run the migrations.",
            "     */",
            "    public function up(): void",
            "    {",
            "        Schema::create('wallets', function (Blueprint \\$table) {",
            "            \\$table->id();",
            "            \\$table->foreignId('user_id')->constrained()->onDelete('cascade');",
            "            \\$table->double('credit', 10, 2)->nullable();",
            "            \\$table->double('debit', 10, 2)->nullable();",
            "            \\$table->text('description');",
            "            \\$table->enum('status',[\"process\",\"done\",\"rejected\"])->default(\"done\");",
            "            \\$table->timestamps();",
            "        });",
            "    }",
            "",
            "    /**",
            "     * Reverse the migrations.",
            "     */",
            "    public function down(): void",
            "    {",
            "        Schema::dropIfExists('wallets');",
            "    }",
            "};"
          ],
          "description": "Migration untuk tabel wallets"
    },
    "Database Seeder": {
          "prefix": "databaseseeder",
          "body": [
            "<?php",
            "",
            "namespace Database\\Seeders;",
            "",
            "use App\\Models\\User;",
            "use Illuminate\\Database\\Seeder;",
            "use Illuminate\\Support\\Facades\\Hash;",
            "",
            "class DatabaseSeeder extends Seeder",
            "{",
            "    /**",
            "     * Seed the application's database.",
            "     */",
            "    public function run(): void",
            "    {",
            "        user::create([",
            "            'name' => 'NEO',",
            "            'role' => 'admin',",
            "            'email' => 'neo@gmail.com',",
            "            'password' => Hash::make(\"neo@gmail.com\")",
            "        ]);",
            "",
            "        User::create([",
            "            'name' => 'BANK',",
            "            'role' => 'bank',",
            "            'email' => 'bank@gmail.com',",
            "            'password' => Hash::make(\"bank@gmail.com\")",
            "        ]);",
            "    }",
            "}"
          ],
          "description": "Seeder awal user admin dan bank"
    },
    "Wallet Routes": {
          "prefix": "walletRoutes",
          "body": [
            "<?php",
            "",
            "use Illuminate\\Support\\Facades\\Auth;",
            "use Illuminate\\Support\\Facades\\Route;",
            "use App\\Http\\Controllers\\HomeController;",
            "use App\\Http\\Controllers\\UserController;",
            "use App\\Http\\Controllers\\WalletController;",
            "",
            "// Home Route",
            "Route::get('/', function () {",
            "    return view('login');",
            "});",
            "",
            "Auth::routes(); // Rute autentikasi otomatis",
            "",
            "// Rute untuk dashboard",
            "Route::get('/home', [HomeController::class, 'index'])->middleware('auth');",
            "Route::get('/home', [HomeController::class, 'index'])->name('home');",
            "",
            "// CRUD User",
            "Route::resource('user', UserController::class);",
            "",
            "// Rute untuk wallet",
            "Route::post('/topUp', [WalletController::class, 'topup'])->name('topUp');",
            "Route::post('/acceptRequest', [WalletController::class, 'acceptRequest'])->name('acceptRequest');",
            "Route::post('/withdraw', [WalletController::class, 'withdraw'])->name('withdraw');",
            "Route::post('/transfer', [WalletController::class, 'transfer'])->name('transfer');",
            "",
            "// Rute untuk admin",
            "Route::prefix('admin')->middleware('auth')->group(function() {",
            "    Route::post('/add-user', [UserController::class, 'store'])->name('add-user');",
            "    Route::get('add-user', [UserController::class, 'create'])->name('add-user');",
            "    Route::post('store-user', [UserController::class, 'store'])->name('store-user');",
            "    Route::get('edit-user/{user}', [UserController::class, 'edit'])->name('edit-user');",
            "    Route::put('update-user/{user}', [UserController::class, 'update'])->name('update-user');",
            "    Route::delete('delete-user/{user}', [UserController::class, 'destroy'])->name('delete-user');",
            "});",
            "",
            "Route::post('/approve/{wallet}', [WalletController::class, 'acceptRequest'])",
            "    ->name('approve')",
            "    ->middleware('role:bank');",
            "",
            "Route::post('/reject/{wallet}', [WalletController::class, 'rejectRequest'])",
            "    ->name('reject')",
            "    ->middleware('role:bank');",
            "",
            "Route::post('/topup.siswa[', [WalletController::class, 'topupsiswa'])->name('topup.siswa');"
          ],
          "description": "Routing untuk fitur login, user, wallet dan admin"
    },
    "Kernel Setup": {
          "prefix": "kernelSetup",
          "body": [
            "<?php",
            "",
            "namespace App\\Http;",
            "",
            "use Illuminate\\Foundation\\Http\\Kernel as HttpKernel;",
            "",
            "class Kernel extends HttpKernel",
            "{",
            "    protected $middleware = [",
            "        // \\App\\Http\\Middleware\\TrustHosts::class,",
            "        \\App\\Http\\Middleware\\TrustProxies::class,",
            "        \\Illuminate\\Http\\Middleware\\HandleCors::class,",
            "        \\App\\Http\\Middleware\\PreventRequestsDuringMaintenance::class,",
            "        \\Illuminate\\Foundation\\Http\\Middleware\\ValidatePostSize::class,",
            "        \\App\\Http\\Middleware\\TrimStrings::class,",
            "        \\Illuminate\\Foundation\\Http\\Middleware\\ConvertEmptyStringsToNull::class,",
            "    ];",
            "",
            "    protected $middlewareGroups = [",
            "        'web' => [",
            "            \\App\\Http\\Middleware\\EncryptCookies::class,",
            "            \\Illuminate\\Cookie\\Middleware\\AddQueuedCookiesToResponse::class,",
            "            \\Illuminate\\Session\\Middleware\\StartSession::class,",
            "            \\Illuminate\\View\\Middleware\\ShareErrorsFromSession::class,",
            "            \\App\\Http\\Middleware\\VerifyCsrfToken::class,",
            "            \\Illuminate\\Routing\\Middleware\\SubstituteBindings::class,",
            "        ],",
            "",
            "        'api' => [",
            "            // \\Laravel\\Sanctum\\Http\\Middleware\\EnsureFrontendRequestsAreStateful::class,",
            "            \\Illuminate\\Routing\\Middleware\\ThrottleRequests::class.':api',",
            "            \\Illuminate\\Routing\\Middleware\\SubstituteBindings::class,",
            "        ],",
            "    ];",
            "",
            "    protected $middlewareAliases = [",
            "        'auth' => \\App\\Http\\Middleware\\Authenticate::class,",
            "        'auth.basic' => \\Illuminate\\Auth\\Middleware\\AuthenticateWithBasicAuth::class,",
            "        'auth.session' => \\Illuminate\\Session\\Middleware\\AuthenticateSession::class,",
            "        'cache.headers' => \\Illuminate\\Http\\Middleware\\SetCacheHeaders::class,",
            "        'can' => \\Illuminate\\Auth\\Middleware\\Authorize::class,",
            "        'guest' => \\App\\Http\\Middleware\\RedirectIfAuthenticated::class,",
            "        'password.confirm' => \\Illuminate\\Auth\\Middleware\\RequirePassword::class,",
            "        'precognitive' => \\Illuminate\\Foundation\\Http\\Middleware\\HandlePrecognitiveRequests::class,",
            "        'signed' => \\App\\Http\\Middleware\\ValidateSignature::class,",
            "        'throttle' => \\Illuminate\\Routing\\Middleware\\ThrottleRequests::class,",
            "        'verified' => \\Illuminate\\Auth\\Middleware\\EnsureEmailIsVerified::class,",
            "    ];",
            "",
            "    protected $routeMiddleware = [",
            "        // ... other middleware",
            "        'role' => \\App\\Http\\Middleware\\CheckRole::class,",
            "    ];",
            "}"
          ],
          "description": "Custom Kernel middleware configuration for Laravel including 'role' middleware"
    },
    "Login Page Fancy": {
          "prefix": "loginPageFancy",
          "body": [
            "<!DOCTYPE html>",
            "<html lang=\"id\">",
            "<head>",
            "  <meta charset=\"UTF-8\">",
            "  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">",
            "  <title>Login</title>",
            "  <script src=\"https://cdn.tailwindcss.com\"></script>",
            "  <script src=\"https://cdn.jsdelivr.net/npm/alpinejs@2.8.2/dist/alpine.js\" defer></script>",
            "  <script src=\"https://cdnjs.cloudflare.com/ajax/libs/feather-icons/4.29.0/feather.min.js\"></script>",
            "  <link href=\"https://fonts.googleapis.com/css2?family=Poppins:wght@400;500;600&display=swap\" rel=\"stylesheet\">",
            "",
            "  <style>",
            "    @keyframes float {",
            "      0% { transform: translateY(0); }",
            "      50% { transform: translateY(-5px); }",
            "      100% { transform: translateY(0); }",
            "    }",
            "    .float {",
            "      animation: float 3s ease-in-out infinite;",
            "    }",
            "  </style>",
            "",
            "  <script>",
            "    tailwind.config = {",
            "      theme: {",
            "        extend: {",
            "          fontFamily: {",
            "            poppins: ['Poppins', 'sans-serif'],",
            "          },",
            "          colors: {",
            "            lightBlue: {",
            "              50: '#f0f9ff',",
            "              100: '#e0f2fe',",
            "              200: '#bae6fd',",
            "              300: '#7dd3fc',",
            "              400: '#38bdf8',",
            "              500: '#0ea5e9',",
            "              600: '#0284c7',",
            "              700: '#0369a1',",
            "              800: '#075985',",
            "              900: '#0c4a6e',",
            "            },",
            "            darkBlue: {",
            "              900: '#1e3a8a',",
            "              800: '#1e40af',",
            "              700: '#1d4ed8',",
            "            }",
            "          }",
            "        }",
            "      }",
            "    }",
            "",
            "    function app() {",
            "      return {",
            "        showPassword: false,",
            "        togglePassword() {",
            "          this.showPassword = !this.showPassword;",
            "        }",
            "      }",
            "    }",
            "",
            "    document.addEventListener('DOMContentLoaded', function () {",
            "      feather.replace();",
            "    });",
            "  </script>",
            "</head>",
            "<body class=\"bg-gradient-to-br from-lightBlue-50 via-lightBlue-200 to-darkBlue-900 min-h-screen flex justify-center items-center p-4 font-poppins relative overflow-hidden\">",
            "  <div class=\"absolute inset-0 overflow-hidden pointer-events-none\">",
            "    <div class=\"w-32 h-32 bg-lightBlue-200 rounded-full opacity-30 absolute -top-10 -left-10\"></div>",
            "    <div class=\"w-24 h-24 bg-lightBlue-300 rounded-full opacity-20 absolute top-20 right-10\"></div>",
            "    <div class=\"w-40 h-40 bg-lightBlue-100 rounded-full opacity-25 absolute bottom-0 left-20\"></div>",
            "  </div>",
            "",
            "  <div class=\"w-full max-w-md bg-white p-8 rounded-xl shadow-lg border border-lightBlue-200 relative z-10\" x-data=\"app()\">",
            "    <div class=\"text-center mb-8\">",
            "      <div class=\"mx-auto w-16 h-16 bg-lightBlue-100 rounded-full flex items-center justify-center mb-4 float\">",
            "        <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"28\" height=\"28\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"text-lightBlue-600\">",
            "          <rect x=\"3\" y=\"11\" width=\"18\" height=\"11\" rx=\"2\" ry=\"2\"></rect>",
            "          <path d=\"M7 11V7a5 5 0 0 1 10 0v4\"></path>",
            "        </svg>",
            "      </div>",
            "      <h2 class=\"text-3xl font-semibold text-darkBlue-800 mb-1\">Login</h2>",
            "      <p class=\"text-lightBlue-600 text-sm\">Masuk ke akun Anda</p>",
            "    </div>",
            "",
            "    <form action=\"{{ route('login') }}\" method=\"POST\">",
            "      @csrf",
            "      <div class=\"mb-6\">",
            "        <label for=\"email\" class=\"block text-darkBlue-900 text-sm font-medium mb-2\">Email</label>",
            "        <input type=\"email\" id=\"email\" name=\"email\" required value=\"{{ old('email') }}\"",
            "          class=\"w-full px-4 py-3 bg-lightBlue-50 border border-lightBlue-200 rounded-lg focus:outline-none focus:ring-2 focus:ring-lightBlue-400 focus:border-lightBlue-400 transition duration-300\"",
            "          placeholder=\"Email kamu\">",
            "        @error('email')",
            "        <p class=\"text-red-500 text-sm mt-2\">{{ $message }}</p>",
            "        @enderror",
            "      </div>",
            "",
            "      <div class=\"mb-6 relative\">",
            "        <label for=\"password\" class=\"block text-darkBlue-900 text-sm font-medium mb-2\">Password</label>",
            "        <div class=\"relative\">",
            "          <input :type=\"showPassword ? 'text' : 'password'\" id=\"password\" name=\"password\" required",
            "            class=\"w-full px-4 py-3 pr-10 bg-lightBlue-50 border border-lightBlue-200 rounded-lg focus:outline-none focus:ring-2 focus:ring-lightBlue-400 focus:border-lightBlue-400 transition duration-300\"",
            "            placeholder=\"Password kamu\">",
            "          <button type=\"button\" @click=\"togglePassword\" class=\"absolute inset-y-0 right-0 pr-3 flex items-center text-lightBlue-400 hover:text-lightBlue-600\" aria-label=\"Toggle password visibility\">",
            "            <svg x-show=\"!showPassword\" xmlns=\"http://www.w3.org/2000/svg\" class=\"h-5 w-5\" viewBox=\"0 0 20 20\" fill=\"currentColor\">",
            "              <path d=\"M10 12a2 2 0 100-4 2 2 0 000 4z\" />",
            "              <path fill-rule=\"evenodd\" d=\"M.458 10C1.732 5.943 5.522 3 10 3s8.268 2.943 9.542 7c-1.274 4.057-5.064 7-9.542 7S1.732 14.057.458 10zM14 10a4 4 0 11-8 0 4 4 0 018 0z\" clip-rule=\"evenodd\" />",
            "            </svg>",
            "            <svg x-show=\"showPassword\" xmlns=\"http://www.w3.org/2000/svg\" class=\"h-5 w-5\" viewBox=\"0 0 20 20\" fill=\"currentColor\" style=\"display: none;\">",
            "              <path fill-rule=\"evenodd\" d=\"M3.707 2.293a1 1 0 00-1.414 1.414l14 14a1 1 0 001.414-1.414l-1.473-1.473A10.014 10.014 0 0019.542 10C18.268 5.943 14.478 3 10 3a9.958 9.958 0 00-4.512 1.074l-1.78-1.781zm4.261 4.26l1.514 1.515a2.003 2.003 0 012.45 2.45l1.514 1.514a4 4 0 00-5.478-5.478z\" clip-rule=\"evenodd\" />",
            "              <path d=\"M12.454 16.697L9.75 13.992a4 4 0 01-3.742-3.741L2.335 6.578A9.98 9.98 0 00.458 10c1.274 4.057 5.065 7 9.542 7 .847 0 1.669-.105 2.454-.303z\" />",
            "            </svg>",
            "          </button>",
            "        </div>",
            "        @error('password')",
            "        <p class=\"text-red-500 text-sm mt-2\">{{ $message }}</p>",
            "        @enderror",
            "      </div>",
            "",
            "      <div class=\"mb-6\">",
            "        <button type=\"submit\" class=\"w-full py-3 bg-darkBlue-700 text-white text-lg font-medium rounded-lg hover:bg-darkBlue-800 focus:outline-none focus:ring-2 focus:ring-lightBlue-500 transform hover:scale-105 transition-all duration-300 shadow-md\">",
            "          Masuk",
            "        </button>",
            "      </div>",
            "    </form>",
            "  </div>",
            "</body>",
            "</html>"
          ],
          "description": "Login page with Tailwind CSS and AlpineJS, styled with gradient and floating elements."
    },
      
  }